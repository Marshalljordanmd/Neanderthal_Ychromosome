#to make multi_FASTA file from vcf


import pandas as pd
import numpy as np
import os
from random import choice


if os.path.exists(''):
	os.remove('ICC_Neander_Allen_89.fasta')



def make_fasta(male,nuc_list):
	k = 0
	
	with open('','a') as mf:
		mf.write('>')
		mf.write(str(male))
		mf.write('\n')
		for n in nuc_list:

			k += 1
			mf.write(n)
			if k == 70:
				mf.write('\n')
				k = 0
		mf.write('\n')
		mf.write('\n')




def make_nuc_list(column):
#to make a list of bases for each column in vcf file
	nuc_list = []
	GT = df.iloc[:,column]
	
	ps = df.iloc[:,1]
	ref = df.iloc[ : ,3]
	alt = df.iloc[ : ,4]
	#mu_ct = 0
	N_count = 0
	
	#below 946 positons characterizing deep branches of S, H, J
	#patriarch_vars = [2661694, 2686727, 2687198, 2700266, 2707859, 2722506, 2728927, 2736889, 2739468, 2743754, 2745276, 2751678, 2756471, 2773548, 2810583, 2817429, 2827409, 2859167, 2887824, 2902839, 3074753, 6063337, 6631743, 6670340, 6692469, 6701239, 6707890, 6720503, 6750775, 6753519, 6823099, 6854256, 6861075, 6864895, 6868118, 6870824, 6875047, 6884700, 6912992, 6914284, 6932790, 6932821, 6941218, 6943527, 6953311, 6965215, 6969270, 6995523, 7039606, 7052802, 7061459, 7065239, 7068942, 7071937, 7081561, 7098985, 7104553, 7108366, 7132713, 7133986, 7138496, 7152161, 7158459, 7173143, 7179825, 7180976, 7190024, 7190277, 7202703, 7210283, 7220102, 7220727, 7223149, 7284302, 7292720, 7306539, 7319580, 7320623, 7321330, 7332132, 7340243, 7340314, 7342300, 7361657, 7377029, 7387758, 7395806, 7401836, 7420321, 7423722, 7432989, 7531596, 7548900, 7560735, 7575406, 7600409, 7602644, 7605031, 7608911, 7628900, 7629583, 7630689, 7647357, 7671530, 7674978, 7676739, 7678694, 7680253, 7681660, 7694266, 7702973, 7726849, 7736744, 7759610, 7762688, 7762947, 7766712, 7771131, 7771358, 7792789, 7819560, 7848043, 7863189, 7905833, 7910634, 7913358, 7917959, 7921793, 7922133, 7948701, 7960019, 7963031, 7971505, 8028896, 8045358, 8050994, 8059894, 8070532, 8072664, 8082372, 8086815, 8096754, 8107430, 8118604, 8131538, 8143135, 8145687, 8149348, 8155660, 8188581, 8202992, 8214827, 8222299, 8225616, 8227605, 8232450, 8254171, 8257661, 8265737, 8287689, 8290951, 8308114, 8308572, 8351025, 8361073, 8375407, 8378220, 8389216, 8393499, 8393849, 8409733, 8411202, 8413025, 8416058, 8417425, 8418927, 8420738, 8424089, 8430640, 8439542, 8442341, 8465758, 8469322, 8483852, 8485542, 8488796, 8502236, 8509773, 8516929, 8532844, 8534979, 8558505, 8558969, 8572150, 8586933, 8589031, 8590752, 8612630, 8613281, 8631875, 8633213, 8633545, 8644218, 8650741, 8660432, 8667179, 8669451, 8676330, 8678907, 8679843, 8680661, 8685083, 8692771, 8694916, 8696594, 8699515, 8729159, 8738272, 8738853, 8775837, 8793919, 8799243, 8810775, 8834885, 8842509, 8855352, 8856161, 8856352, 8880108, 8888300, 8906357, 9064682, 9084870, 9091871, 9098922, 9108252, 9171956, 9389773, 9392948, 9394763, 9398746, 9410828, 9810794, 9815201, 9851457, 9896957, 9898716, 13213680, 13238659, 13597365, 13883812, 14007673, 14031334, 14042701, 14060308, 14064845, 14079811, 14088696, 14102925, 14106407, 14117810, 14127014, 14136291, 14140277, 14144593, 14149772, 14159846, 14162442, 14171665, 14171812, 14181646, 14197456, 14197867, 14199508, 14202887, 14221285, 14226692, 14237131, 14237670, 14242950, 14264859, 14279792, 14286528, 14308835, 14317555, 14320934, 14324714, 14329233, 14330570, 14331272, 14352921, 14359692, 14367181, 14392807, 14393170, 14394512, 14396708, 14410669, 14419185, 14448405, 14454866, 14474359, 14476551, 14497207, 14545105, 14565310, 14611330, 14621885, 14628068, 14636530, 14641542, 14645286, 14664631, 14675847, 14696327, 14718400, 14720338, 14750668, 14777360, 14777842, 14785570, 14790675, 14794675, 14804077, 14832620, 14842223, 14850935, 14865477, 14969634, 14972667, 14983106, 14996960, 15019092, 15021522, 15026633, 15038544, 15040454, 15047272, 15051084, 15055079, 15089380, 15095345, 15095592, 15138096, 15169439, 15203000, 15203676, 15234830, 15237163, 15279381, 15281135, 15312020, 15313925, 15323154, 15355973, 15377120, 15387592, 15423590, 15452855, 15456749, 15467824, 15468045, 15472863, 15476324, 15479586, 15489314, 15497285, 15510064, 15520497, 15526751, 15541126, 15543875, 15553123, 15554989, 15574144, 15581983, 15590674, 15600055, 15602183, 15610713, 15617734, 15622389, 15632637, 15648415, 15649242, 15651438, 15662633, 15664140, 15667208, 15704139, 15712801, 15732786, 15738879, 15768559, 15772820, 15775488, 15785403, 15790691, 15818409, 15842844, 15843782, 15866385, 15869722, 15874245, 15906786, 15913787, 15918592, 15935524, 15938877, 15944828, 15945309, 15955432, 15998551, 16005138, 16034898, 16045476, 16089433, 16178042, 16180103, 16183412, 16196053, 16222561, 16230262, 16242316, 16244914, 16252670, 16260219, 16260541, 16261215, 16262942, 16268345, 16270583, 16273067, 16310787, 16340858, 16352755, 16362850, 16364286, 16368310, 16375930, 16376495, 16388339, 16401339, 16401405, 16411884, 16422613, 16422714, 16424754, 16427564, 16437462, 16438097, 16459438, 16463301, 16467111, 16475682, 16484019, 16492547, 16497020, 16518740, 16535034, 16542685, 16562707, 16567551, 16601056, 16604397, 16607930, 16615413, 16629782, 16636022, 16636407, 16661107, 16690780, 16707631, 16713287, 16731682, 16742224, 16751001, 16773870, 16808859, 16824270, 16839641, 16846439, 16856357, 16863259, 16869030, 16880603, 16881142, 16882568, 16906683, 16925303, 16939406, 16944053, 16966024, 16971648, 17005069, 17011456, 17012180, 17016421, 17032059, 17040447, 17042047, 17090474, 17092499, 17101604, 17115298, 17132580, 17138251, 17138662, 17140219, 17142068, 17144649, 17191877, 17200869, 17206350, 17209379, 17210893, 17217419, 17224433, 17240229, 17246058, 17256018, 17263071, 17301401, 17310846, 17311975, 17312965, 17314682, 17319025, 17325559, 17331551, 17334694, 17341676, 17367321, 17374007, 17381144, 17394111, 17397645, 17400322, 17400785, 17412198, 17420017, 17443989, 17461478, 17464197, 17470112, 17493513, 17495914, 17502468, 17502703, 17506532, 17508337, 17510402, 17513178, 17516070, 17535140, 17559652, 17594966, 17605948, 17612676, 17614366, 17622855, 17631010, 17637446, 17660074, 17676943, 17686886, 17689245, 17693210, 17722802, 17723403, 17737313, 17744738, 17762668, 17780707, 17781687, 17782178, 17792632, 17803995, 17814087, 17840602, 17844018, 17844781, 17846528, 17846754, 17860729, 17867791, 17904970, 17910848, 17924675, 17942143, 17951267, 17961512, 17986687, 18018684, 18023975, 18026855, 18028661, 18045601, 18051289, 18066156, 18081435, 18084124, 18093142, 18095242, 18095336, 18103101, 18109555, 18116596, 18117193, 18118314, 18118658, 18121600, 18149476, 18152125, 18167403, 18181803, 18206187, 18242225, 18248698, 18257026, 18381735, 18384838, 18394634, 18407611, 18410799, 18552360, 18561042, 18567169, 18573064, 18573243, 18577293, 18578476, 18581828, 18588650, 18601274, 18613279, 18615144, 18617336, 18633084, 18637397, 18656508, 18662674, 18695159, 18720028, 18728618, 18765146, 18765649, 18765939, 18769674, 18772238, 18772490, 18773505, 18776629, 18776848, 18814579, 18818812, 18823372, 18860537, 18865298, 18880574, 18894151, 18904838, 18907236, 18918010, 18949452, 18950820, 18952077, 18964263, 18978214, 18989102, 18992262, 19037126, 19038302, 19045124, 19045552, 19058376, 19067469, 19069070, 19089674, 19117262, 19136822, 19144375, 19145992, 19166861, 19170454, 19179335, 19181063, 19205814, 19218248, 19220113, 19220444, 19227300, 19237093, 19245417, 19245679, 19246561, 19283232, 19298321, 19303108, 19315988, 19316389, 19324937, 19338287, 19349615, 19360192, 19370916, 19372895, 19379113, 19391439, 19391907, 19396726, 19402470, 19414736, 19414935, 19416446, 19417241, 19417394, 19422531, 19443039, 19460042, 19460756, 19467705, 19500107, 19508788, 19531673, 19539477, 19564788, 19565462, 20812228, 20812311, 20816211, 20828795, 20836109, 20837553, 20838224, 21034387, 21036413, 21040853, 21052030, 21080707, 21083420, 21097847, 21110154, 21117557, 21117888, 21131760, 21142273, 21147336, 21148350, 21159055, 21192906, 21203272, 21214947, 21219443, 21222868, 21225770, 21227423, 21256219, 21263029, 21268147, 21292707, 21306315, 21312064, 21314704, 21315746, 21318263, 21321273, 21329083, 21331627, 21358197, 21369924, 21370262, 21371764, 21385724, 21389667, 21389837, 21391476, 21408046, 21409706, 21410840, 21410887, 21425375, 21453551, 21458735, 21461202, 21476910, 21525570, 21528257, 21541669, 21553644, 21555393, 21558298, 21567932, 21570974, 21571895, 21581064, 21582138, 21583211, 21593023, 21610831, 21618583, 21618856, 21643140, 21645802, 21652284, 21653829, 21658631, 21674327, 21700267, 21706148, 21717208, 21730257, 21747107, 21768404, 21775724, 21778998, 21784286, 21801722, 21811108, 21811276, 21821596, 21822466, 21843090, 21858778, 21860060, 21867787, 21893303, 21900502, 21903853, 21917313, 21917832, 21923739, 21928952, 21947464, 21970721, 21977569, 21983698, 21993844, 22001099, 22035827, 22072340, 22080316, 22118776, 22126204, 22168598, 22172960, 22176853, 22181731, 22538799, 22588254, 22671606, 22673903, 22687035, 22687547, 22688731, 22700429, 22708656, 22711465, 22715995, 22721522, 22722580, 22733758, 22739367, 22749853, 22750583, 22785217, 22808236, 22818334, 22822901, 22823155, 22823374, 22836385, 22866703, 22898839, 22909101, 22918577, 22934109, 22940845, 22942897, 22950033, 22962154, 22968980, 22978713, 22999966, 23009991, 23021729, 23021978, 23035132, 23039783, 23040647, 23045843, 23058442, 23059591, 23065809, 23088142, 23124367, 23127578, 23161406, 23161549, 23163701, 23184106, 23185647, 23196336, 23233175, 23238985, 23242935, 23249378, 23250894, 23251880, 23255729, 23257819, 23273016, 23294247, 23295435, 23342709, 23351411, 23353901, 23379254, 23402887, 23403749, 23421475, 23422150, 23430285, 23443971, 23443976, 23461351, 23475526, 23499601, 23550924, 23562474, 23583614, 23600700, 23614600, 23629008, 23631629, 23654339, 23729951, 23781504, 23870139, 23954861, 23974800, 23979899, 23984056, 23993156, 24426007, 28708145]

	#below the 294 snp row indexes
#	snp_i = [51, 159, 196, 197, 198, 307, 314, 317, 350, 354, 355, 371, 372, 382, 383, 406, 408, 417, 446, 448, 461, 467, 469, 474, 490, 496, 497, 502, 507, 508, 517, 519, 535, 537, 543, 548, 572, 607, 608, 626, 756, 773, 788, 858, 874, 885, 887, 912, 916, 919, 930, 937, 942, 1002, 1010, 1022, 1030, 1032, 1034, 1035, 1036, 1048, 1052, 1065, 1069, 1076, 1082, 1087, 1089, 1093, 1094, 1100, 1101, 1108, 1109, 1115, 1116, 1119, 1121, 1122, 1130, 1132, 1140, 1142, 1156, 1157, 1168, 1171, 1174, 1175, 1180, 1186, 1187, 1188, 1191, 1194, 1200, 1224, 1225, 1232, 1239, 1244, 1248, 1250, 1256, 1257, 1258, 1260, 1261, 1269, 1274, 1275, 1278, 1280, 1281, 1287, 1296, 1298, 1300, 1305, 1338, 1350, 1392, 1412, 1422, 1427, 1429, 1438, 1439, 1440, 1451, 1454, 1455, 1459, 1470, 1471, 1496, 1533, 1540, 1547, 1565, 1569, 1605, 1606, 1639, 1643, 1656, 1661, 1662, 1730, 1732, 1766, 1784, 1799, 1801, 1844, 1893, 1899, 1902, 1931, 1941, 2026, 2047, 2078, 2101, 2125, 2132, 2134, 2150, 2151, 2193, 2248, 2249, 2256, 2284, 2306, 2307, 2351, 2355, 2369, 2379, 2394, 2402, 2403, 2404, 2450, 2516, 2609, 2614, 2642, 2693, 2694, 2705, 2720, 2722, 2817, 2820, 2916, 2918, 2976, 3041, 3056, 3080, 3087, 3104, 3105, 3106, 3108, 3109, 3160, 3200, 3209, 3219, 3220, 3270, 3275, 3295, 3341, 3356, 3440, 3443, 3445, 3449, 3474, 3502, 3522, 3525, 3559, 3567, 3627, 3716, 3717, 3718, 3724, 3742, 3756, 3786, 3838, 3908, 3911, 3912, 3960, 3993, 4003, 4017, 4028, 4033, 4050, 4087, 4095, 4115, 4147, 4245, 4281, 4307, 4333, 4357, 4358, 4361, 4390, 4414, 4424, 4439, 4446, 4493, 4571, 4596, 4658, 4782, 4792, 4817, 4860, 4920, 4928, 4933, 4934, 4936, 4951, 4954, 4960, 4975, 4996, 5005, 5053, 5080, 5094, 5097, 5117, 5135, 5145, 5146, 5169, 5182, 5183]

	#for v in patriarch_vars:
	for i in spec_rows:
		#if ps[i] == v:
		transversion = True
		mu_type = ref[i] + alt[i]

# 		if mu_type.__contains__('A') and mu_type.__contains__('G'):
# 			transversion = False
# 		elif mu_type.__contains__('C') and mu_type.__contains__('T'):
# 			transversion = False
	
		if transversion == True:	
# 			r = freq[i]
# 			column7 = {}
# 			column7 = dict(e.split('=') for e in r.split(';'))
# 			if int(column7['AC']) > 0:					
			if GT[i] == 1 or GT[i] == '1':
				nuc_list.append(alt[i])
				#mu_ct += 1
			elif GT[i] == 0 or GT[i] == '0':
				nuc_list.append(ref[i])
			else:
				nuc_list.append('N')
				N_count+=1
					
	return(nuc_list,N_count)




spec_rows = [51, 159, 196, 197, 198, 307, 314, 317, 350, 354, 355, 371, 372, 382, 383, 406, 408, 417, 446, 448, 461, 467, 469, 474, 490, 496, 497, 502, 507, 508, 517, 519, 535, 537, 543, 548, 572, 607, 608, 626, 756, 773, 788, 858, 874, 885, 887, 912, 916, 919, 930, 937, 942, 1002, 1010, 1022, 1030, 1032, 1034, 1035, 1036, 1048, 1052, 1065, 1069, 1076, 1082, 1087, 1089, 1093, 1094, 1100, 1101, 1108, 1109, 1115, 1116, 1119, 1121, 1122, 1130, 1132, 1140, 1142, 1156, 1157, 1168, 1171, 1174, 1175, 1180, 1186, 1187, 1188, 1191, 1194, 1200, 1224, 1225, 1232, 1239, 1244, 1248, 1250, 1256, 1257, 1258, 1260, 1261, 1269, 1274, 1275, 1278, 1280, 1281, 1287, 1296, 1298, 1300, 1305, 1338, 1350, 1392, 1412, 1422, 1427, 1429, 1438, 1439, 1440, 1451, 1454, 1455, 1459, 1470, 1471, 1496, 1533, 1540, 1547, 1565, 1569, 1605, 1606, 1639, 1643, 1656, 1661, 1662, 1730, 1732, 1766, 1784, 1799, 1801, 1844, 1893, 1899, 1902, 1931, 1941, 2026, 2047, 2078, 2101, 2125, 2132, 2134, 2150, 2151, 2193, 2248, 2249, 2256, 2284, 2306, 2307, 2351, 2355, 2369, 2379, 2394, 2402, 2403, 2404, 2450, 2516, 2609, 2614, 2642, 2693, 2694, 2705, 2720, 2722, 2817, 2820, 2916, 2918, 2976, 3041, 3056, 3080, 3087, 3104, 3105, 3106, 3108, 3109, 3160, 3200, 3209, 3219, 3220, 3270, 3275, 3295, 3341, 3356, 3440, 3443, 3445, 3449, 3474, 3502, 3522, 3525, 3559, 3567, 3627, 3716, 3717, 3718, 3724, 3742, 3756, 3786, 3838, 3908, 3911, 3912, 3960, 3993, 4003, 4017, 4028, 4033, 4050, 4087, 4095, 4115, 4147, 4245, 4281, 4307, 4333, 4357, 4358, 4361, 4390, 4414, 4424, 4439, 4446, 4493, 4571, 4596, 4658, 4782, 4792, 4817, 4860, 4920, 4928, 4933, 4934, 4936, 4951, 4954, 4960, 4975, 4996, 5005, 5053, 5080, 5094, 5097, 5117, 5135, 5145, 5146, 5169, 5182, 5183]




file = 'ICC_Neanderthal_Denisovan_Forager_Allen_5226.vcf'

df = pd.read_csv(file, sep = '\t', comment = '#',header=None, low_memory = False)
print(df)
rows = df.shape[0]
col = len(df.columns) 
print('number of columns = ',col)
ps = df.iloc[ : ,1]
ref = df.iloc[ : ,3]
alt = df.iloc[ : ,4]
freq = df.iloc[ : ,7]
print('')
print('ref of 1st column = ',ref[0])
print(type(ref[0]))


f1 = 'header.txt'
df1 = pd.read_csv(f1, sep = '\t',header=None, comment = '#', low_memory = False)
print(df1)
sam_cols = len(df1.columns)
#mu_dict = {} #to keep track of how many mutations each sample has
null_dict = {}


f_sizes = []
file_ct = 0
final_samples = []

#109 samples from 'Neanderthal_Allen_aDNA_5227snp_878samples_annotated.vcf'
#ancients = [9, 11, 12, 15, 18, 19, 20, 24, 34, 48, 61, 67, 68, 69, 97, 106, 107, 108, 135, 137, 146, 147, 153, 171, 198, 199, 210, 215, 237, 245, 246, 247, 248, 270, 271, 273, 289, 290, 292, 294, 301, 305, 309, 317, 321, 331, 333, 338, 339, 346, 347, 349, 352, 354, 360, 361, 366, 367, 371, 372, 377, 386, 402, 439, 444, 446, 448, 451, 464, 470, 475, 516, 526, 541, 568, 571, 575, 586, 589, 593, 604, 634, 643, 654, 655, 657, 672, 709, 710, 717, 724, 730, 745, 783, 788, 802, 806, 807, 811, 814, 815, 817, 846, 847, 889, 890, 891]


for m in range(9,col): 
#for m in ancients: 
	
	male = df1.iloc[0,m]  #male is the column ID name
#	print(male)
# 	if m == 9:
# 		
# 		print('1st male column = ',male)
# 		print(type(male))
	nuc_list, N_ct = make_nuc_list(m) #argument is male column number
	f_sizes.append(len(nuc_list))
	
# 	if m in ancients:
# 		print(m)
# 		final_samples.append(m)
	make_fasta(male,nuc_list)
# 		file_ct += 1
# 		null_dict[male] = N_ct
# 	elif N_ct <= 190:
# 		print(m)
# 		final_samples.append(m)
# 		make_fasta(male,nuc_list)
# 		file_ct += 1
# 		null_dict[male] = N_ct
print(min(f_sizes),' - ',max(f_sizes))
print('')
#print('Null dictionary = ',null_dict)
#print('number of files = ',file_ct)
print('')
#print('samples used in multi-fasta = ',final_samples)


#Null dictionary =  {'a00_A00': 93, 'den4': 1619, 'den8': 993, 'mez2': 331, 'spy1': 1740, 'I5950_E1b1a2b2~': 1075, 'I4427_B2b1a1~': 1638, 'I4468_B2': 1790, 'I10871_A00': 261, 'I10872_B': 458, 'I10873_B2b': 250, 'I8930_B2b1a1~': 1857, 'I13983_B2b1': 1853, '689_Sumidouro5_Brazil_10372.0_Q1b1a1a': 63, '1154_A460_Chile_5130.0_Q1b1a1a': 32, '1158_IPY10_Chile_775.0_Q1b1a1a': 98, '2662_I0160_United Kingdom_1973.0_R1b1a1b1a1a2c1a5b1a1a': 148, '2962_I6750_United Kingdom_5650.0_I2a1b1a1a1b': 48, '3244_I5950_Ethiopia_4470.0_E1b1a2b2~': 35, '3558_2HC51961131_France_5161.0_I2a1b1b': 51, '3725_SATP_Georgia_13282.0_J1': 88, '4802_SZ15_Hungary_1442.0_R1a1a1b1a3a1b3e5~': 22, '4803_SZ2_Hungary_1442.0_R1b1a1b1a1a1c2b': 29, '4806_SZ5_Hungary_1442.0_R1b1a1b1a1a2a': 23, '4841_I1495_Hungary_6367.0_I2a1a1b': 3, '5311_rath2_Ireland_3819.0_R1b1a1b1a1a2c1a5c': 40, '6296_I11541_Kazakhstan_3684.0_R1a1a1b2a2': 6, '6641_ALN002_Kyrgyzstan_1719.0_R1a1a1': 10, '6968_Ma912_Malaysia_2459.0_O1b1a1a1': 5, '8633_I6714_Russia_4479.0_Q1b2a1a~': 50, '8634_I3949_Russia_4569.0_Q1b': 50, '8636_I3949_Russia_4569.0_Q1b2a1a~': 111, '8659_irk025_Russia_4350.0_Q1b1b~': 85, '8660_irk036_Russia_4720.0_Q1b1b~': 40, '8884_irk068_Russia_4468.0_Q1b1b~': 83, '8885_irk007_Russia_8801.0_N1a2': 169, '9140_Sunghir4_Russia_34323.0_C1a2': 57, '9163_I1526_Russia_4779.0_Q1b1b~': 0, '9225_Yana2_Russia_31850.0_P1~': 4, '9581_UCT386_South Africa_1910.0_A1b1': 26, '11076_Bar31_Turkey_8272.0_G2a': 129, '11293_I5319_USA_725.0_Q1b1a1a': 89, '11294_523a_USA_100.0_Q1b1a1a': 89, '11423_AHUR770c_USA_10988.0_Q1b1a1a': 18, '11583_I1775_United Kingdom_3563.0_R1b1a1b1a1a2': 32, '12039_KS20_KS25.SG_Nepal_2351.0_O2a2b1a1a1a4a1': 33, '12061_S143_S173.SG_Nepal_1275.0_O2a2b1a1a1a4a1': 160, '12561_VK534_Italy_766.0_R1b1a1b1a1a2b2b~': 166}

print('Done')
